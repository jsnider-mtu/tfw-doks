#To reclaim PV: k patch pv pvc-bb65d73a-5b0c-4f10-a1fc-9053e60c910e -p '{"spec":{"claimRef": null}}'
#Then k apply -f socmed.yaml
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: socmed
  name: socmed
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: do-block-storage-persist
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: backend
  namespace: socmed
  name: backend
spec:
  serviceName: backend
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      securityContext:
        fsGroup: 1000
      nodeSelector:
        purpose: apps
      containers:
      - name: backend
        image: registry.digitalocean.com/liberland/socmed/backend:0.0.1
        imagePullPolicy: Always
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 10
          successThreshold: 1
          timeoutSeconds: 1
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 10
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - name: pluginapi
          containerPort: 8080
          protocol: TCP
        - name: api
          containerPort: 4000
          protocol: TCP
        - name: peer
          containerPort: 5000
          protocol: TCP
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: socmed
          mountPath: /home/node/.lisk
      volumes:
      - name: socmed
        persistentVolumeClaim:
          claimName: socmed
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-protocol: tcp
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-protocol: tcp
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-port: "8080"
  namespace: socmed
  name: backend
spec:
  ports:
  - name: pluginapi
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: api
    port: 4000
    protocol: TCP
    targetPort: 4000
  - name: peer
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: backend
  type: LoadBalancer
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  labels:
#    app: frontend
#  namespace: socmed
#  name: frontend
#spec:
#  replicas: 3
#  selector:
#    matchLabels:
#      app: frontend
#  template:
#    metadata:
#      labels:
#        app: frontend
#    spec:
#      nodeSelector:
#        purpose: apps
#      containers:
#      - name: frontend
#        image: registry.digitalocean.com/liberland/socmed/frontend:0.0.1
#        imagePullPolicy: Always
#        stdin: true
#        readinessProbe:
#          tcpSocket:
#            port: 3000
#          initialDelaySeconds: 30
#          periodSeconds: 5
#          failureThreshold: 10
#          successThreshold: 1
#          timeoutSeconds: 1
#        livenessProbe:
#          tcpSocket:
#            port: 3000
#          initialDelaySeconds: 30
#          periodSeconds: 5
#          failureThreshold: 10
#          successThreshold: 1
#          timeoutSeconds: 1
#        ports:
#        - name: web
#          containerPort: 3000
#          protocol: TCP
#        resources:
#          limits:
#            cpu: 1
#            memory: 1Gi
#          requests:
#            cpu: 500m
#            memory: 512Mi
#---
#apiVersion: v1
#kind: Service
#metadata:
#  annotations:
#    service.beta.kubernetes.io/do-loadbalancer-protocol: tcp
#    service.beta.kubernetes.io/do-loadbalancer-healthcheck-protocol: tcp
#    service.beta.kubernetes.io/do-loadbalancer-healthcheck-port: "3000"
#  namespace: socmed
#  name: frontend
#spec:
#  ports:
#  - name: web
#    port: 3000
#    protocol: TCP
#    targetPort: 3000
#  selector:
#    app: frontend
#  type: LoadBalancer
